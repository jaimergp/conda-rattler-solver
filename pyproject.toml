[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "conda-rattler-solver"
description = "The fast pixi solver, now in conda"
readme = "README.md"
license = { file = "LICENSE" }
classifiers = [
  "License :: OSI Approved :: BSD License",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]
requires-python = ">=3.8"
dependencies = [
  "conda >=25.3.0",
  "py-rattler >=0.13.1",
]
dynamic = ["version"]

[project.urls]
homepage = "https://github.com/conda-incubator/conda-rattler-solver"

[project.entry-points.conda]
conda-rattler-solver = "conda_rattler_solver.plugin"

[tool.hatch.version]
source = "vcs"

[tool.pixi.project]
channels = ["conda-forge"]
platforms = ["linux-64", "osx-arm64", "osx-64", "win-64"]

[tool.pixi.dependencies]
"conda" = ">=25.3.0"
"py-rattler" = ">=0.13.1"

[tool.pixi.pypi-dependencies]
conda-rattler-solver = { path = ".", editable = true }

[tool.pixi.feature.build]
dependencies = { conda-build = "*" }
[tool.pixi.feature.build.tasks]
build = { cmd = "conda build recipe --override-channels -c conda-forge", env = {CONDA_SOLVER = "libmamba"} }

[tool.pixi.feature.docs.tasks]
docs = { cmd = "python -m sphinx.cmd.build -M dirhtml . _build", cwd = "docs" }
serve = { cmd = "python -m http.server", cwd = "docs/_build/dirhtml" }
clean = { cmd = "rm -rf _build", cwd = "docs" }

[tool.pixi.feature.docs.dependencies]
python = "3.10.*"
conda-sphinx-theme = "*"
linkify-it-py = "*"
myst-parser = "*"
sphinx = "*"
sphinx-copybutton = "*"
sphinx-design = "*"
sphinx-reredirects = "*"
sphinx-sitemap = "*"
sphinxcontrib-programoutput = "*"

[tool.pixi.feature.test.tasks]
pre-commit = 'pre-commit'

[tool.pixi.feature.test.tasks.test]
cmd = "python -m pytest"
[tool.pixi.feature.test.tasks.test.env]
CONDA_TEST_SOLVERS = "rattler"
CONDA_TEST_DATA_DIR = "$PIXI_PROJECT_ROOT/../conda/tests/data"


[tool.pixi.feature.test.dependencies]
anaconda-client = "*"
conda-build = "*"
conda-index = "*"
conda-lock = "*"
coverage = "*"
flask = ">=2.2"                # jlap pytest fixture
git = "*"
importlib_resources = ">=5.10" # only necessary for Python < 3.12
pexpect = "*"
pip = "*"
pytest = "*"
pytest-cov = "*"
pytest-mock = "*"
pytest-rerunfailures = "*"
pytest-split = "*"
pytest-timeout = "*"
pytest-xprocess = "*"
responses = "*"
tomli = "*"                    # for coverage pyproject.toml, only necessary for Python <= 3.11.0a6
werkzeug = ">=2.2"             # jlap pytest fixture

[tool.pixi.feature.py39.dependencies]
python = "3.9.*"

[tool.pixi.feature.py310.dependencies]
python = "3.10.*"

[tool.pixi.feature.py311.dependencies]
python = "3.11.*"

[tool.pixi.feature.py312.dependencies]
python = "3.12.*"

[tool.pixi.environments]
dev = ["py39"]
build = ["build"]
docs = ["docs"]
test-py39 = ["test", "py39"]
test-py310 = ["test", "py310"]
test-py311 = ["test", "py311"]
test-py312 = ["test", "py312"]

[tool.hatch.build.hooks.vcs]
version-file = "conda_rattler_solver/_version.py"

[tool.coverage.report]
exclude_lines = ["pragma: no cover", "if TYPE_CHECKING:"]
omit = ["conda_rattler_solver/_version.py"]
show_missing = true
skip_covered = true
sort = "Miss"

[tool.pytest.ini_options]
addopts = [
  "--color=yes",
  "--durations=16",   # show 16 slowest tests
  "--strict-markers",
  "--tb=native",
  "-vv",
]
markers = [
  "integration: integration tests that usually require an internet connect",
  "slow: slow running tests",
]

[tool.ruff]
target-version = "py39"
line-length = 99

[tool.ruff.lint]
flake8-type-checking = { exempt-modules = [], strict = true }
# see https://docs.astral.sh/ruff/rules/
select = [
  # "D1",  # pydocstyle
  "E",      # pycodestyle errors
  "F",      # pyflakes
  "FA",     # flake8-future-annotations
  "I",      # isort
  "ISC",    # flake8-implicit-str-concat
  "RUF100", # Unused noqa directive
  "T10",    # flake8-debugger
  "TCH",    # flake8-type-checking
  "UP",     # pyupgrade
  "W",      # pycodestyle warnings
]
